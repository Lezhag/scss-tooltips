/*
* SCSS Tooltips
* By David Tintner & Hacking UI
* http://hackingui.com/front-end/scss-tooltips/
*
* $direction: ne, nw, se, sw. relative to the element the tooltip is on
* $bg-color: any CSS valid color string, will be applied as bg color of tooltip
* Content for tooltip comes from data-tooltip attribute on element
*/

//dependencies
@import 'vendor/utility-belt';

/*
* Where the magic happens
*/

$tooltip-background-color: #0061c8 !default;
$tooltip-triangle-size: 6px !default; // = height of triangle, width is 2x
$tooltip-data-attribute: 'data-tooltip' !default;
$tooltip-class: 'tooltip' !default;
$color: white;
// set the color automatically based on the tooltip background
@if lightness($tooltip-background-color) > 50% {
  $color: black;
}
$tooltip-font-color: $color !default;

@mixin tooltip-center() {
  &:before, &:after {
    left: 50%;
    margin-left: 0;
  }
  &:before {
    transform: translate3d(-50%, -100%, 0);
    margin-right: -$tooltip-triangle-size * 3;
  }
}
@mixin tooltip-down() {
  &:before {
    bottom: -($tooltip-triangle-size + 3px); top: auto; // extra 3px for spacing
    transform: translateY(100%);
  }
  &:after {
    @include triangle(up, $tooltip-triangle-size, $tooltip-background-color);
    bottom: -($tooltip-triangle-size + 3px); top: auto;
  }
}
@mixin tooltip-up() {
  &:before {
    top: -($tooltip-triangle-size + 3px); bottom: auto; // override with auto in case this tooltip is overriding a previous instance in another direction
    transform: translateY(-100%);
  }
  &:after {
    @include triangle(down, $tooltip-triangle-size, $tooltip-background-color);
    top: -($tooltip-triangle-size + 3px); bottom: auto;
  }
}
@mixin tooltip-left() {
  &:before, &:after {
    right: 50%; left: auto;
    margin-right: -$tooltip-triangle-size;
  }
  &:before { margin-right: -$tooltip-triangle-size * 3; }
}
@mixin tooltip-right() {
  &:before, &:after {
    left: 50%; right: auto;
    margin-left: -$tooltip-triangle-size;
  }
  &:before { margin-left: -$tooltip-triangle-size * 3; }
}

@mixin tooltip() {
  // configuration variables
  $tooltip-triangle-size: 6px; // = height of triangle, width is 2x
  $tooltip-width: 200px;
  $fade: 300ms;
  $white: #fff;
  $black: #000;

  position: relative; // can override this to absolute or fixed if necessary. Just can't be static

  &:before, &:after {
    opacity: 0;
    z-index: 98;
    transition: opacity $fade, visibility 0ms linear $fade; // delay visibility on fade out
    pointer-events: none;
    @include respondTo(smartphone){ display: none; }
  }
  &:before { // tooltip body
    content: attr(#{$tooltip-data-attribute});
    position: absolute;
    width: $tooltip-width;
    padding: 10px 15px;
    line-height: 18px;
    text-align: left;
    font-size: 13px;
    font-weight: normal;
    white-space: normal;
    box-shadow: 1px 1px 3px rgba(0,0,0,0.3);
    border-radius: 3px;
    background-color: $tooltip-background-color;
    color: $tooltip-font-color;
  }
  &:after { content: ''; } // tooltip carrot

  // apply positioning to top
  &:before {
    top: -($tooltip-triangle-size + 3px); bottom: auto; // override with auto in case this tooltip is overriding a previous instance in another direction
    transform: translateY(-100%);
    margin-left: -$tooltip-triangle-size * 3;
  }
  &:after {
    @include triangle(down, $tooltip-triangle-size, $tooltip-background-color);
    top: -($tooltip-triangle-size + 3px); bottom: auto;
  }

  // apply positioning to right values
  &:before, &:after {
    left: 50%; right: auto;
    margin-left: -$tooltip-triangle-size;
  }

  &:hover {
    /* putting comment here so :hover is declared first by itself to fix ie10 bug with transitions on psuedo elements- http://css-tricks.com/pseudo-element-animationstransitions-bug-fixed-in-webkit/ */
    &:before, &:after {
      opacity: 1;
      pointer-events: all;
      transition-delay : 0ms;
      @include respondTo(smartphone){ display: none; }
    }
  }
}
//*
//* Ready to use CSS classes.
//*
.#{$tooltip-class} { @include tooltip(); }
.#{$tooltip-class}--up { @include tooltip-up(); }
.#{$tooltip-class}--down { @include tooltip-down(); }
.#{$tooltip-class}--left { @include tooltip-left(); }
.#{$tooltip-class}--right { @include tooltip-right(); }
.#{$tooltip-class}--center { @include tooltip-center(); }
